[] What is git.
    Git is a distributed version control system designed to handle everything from
    small to very large projects with speed and efficiency. It allows multiple 
    developers to work on a project simultaneously without interfering with each 
    other's work. Git tracks changes to files, allowing you to revert to previous 
    versions, collaborate with others, and maintain a history of your project.

[] For initializing the git used command:-
   command:- git init  
    command:- git init -b BranchName
    Initializes a new Git repository. The second command initializes a repository with a specific branch name.

[] See the Status:-
    command:- git status
    Shows the working directory and staging area status.

[] Types of Files in Git Status
    1. Untracked: New files that Git does not yet track.
    2. Modified: Files that have been changed.
    3. Staged: Files that are ready to be committed.
    4. Unmodified: Files that have not been changed.

[] Display all the files in the current working directory
    command:- ls     # Does not display hidden files
    command:- ls -a  # Displays all files, including hidden ones
    command:- Get-ChildItem -Force   # PowerShell command to display all files

[] For deleting the git files:-
    command:- rm -rf .git    # Removes the .git directory
    command:- Remove-Item -Recurse -Force .git   # PowerShell command to remove the .git directory

[] Add changes in the working directory to the staging area.
   command:- git add filename    # Adds a single file
    command:- git add .           # Adds all files

[] To unstage a file:
    command:- git rm --cached <filename>

[] View the commit history:
    command:- git log

[] Commit changes to the repository:
    command:- git commit -m "commit message"    # Commits with a message

[] To skip the staging area:
    command:- git commit -a -m "commit message"

[] To see what changes happened in the file:
    command:- git diff

[] To see changes between the staging area and the last commit:
    command:- git diff --staged    

[] To delete a file from the staging area:
    command:- git reset HEAD filename
    command:- git rm --cached filename

[] To delete a file from the working directory:
    command:- del filename

[] For configuration:
    command:- git config --global user.name="your Name"
    command:- git config --global user.email="your Email"

[] To display the configuration:
    command:- git config --global user.name
    command:- git config --global user.email

[] To change the branch name:
    command:- git branch -m old-branch-name new-branch-name

[] Steps to upload repository content to a remote repository using HTTP URL: 
    Step 1:- Initialize a new Git repository (if not already initialized):
              Command:- git init
    Step 2:- Add all files to the staging area:
             Command:- git add .
    Step 3:- Commit the changes with a meaningful commit message:
              command:- git commit -m "Your commit message"
    Step 4:- Add the remote repository URL:
            command:- git remote add origin <remote-repository-URL>
    Step 5:- Push the changes to the remote repository: 
             command:- git push -u origin branchName

[] To merge the remote repository history with your local repository when they have different histories:
    Step 1:- git init (if not initialized)
    Step 2:- git remote add <Repo URL>
    Step 3:- git fetch origin
    Step 4:- git add filename
    Step 5:- git commit -m "Message"
    Step 6:- git push -u origin branchName

[] To check the branch name:
    command:- git branch

[] To rename the branch name:
    command:- git branch -m main

[] To navigate from one branch to another:
    command:- git checkout <branchName>

[] To create a new branch:
    command:- git checkout -b <new BranchName>

[] To delete a branch:
    command:- git branch -d <branchName>  # Deletes the branch locally

[] To delete a branch on the remote repository:
    command:- git push origin --delete <branchName>

[] Merging code:
    way 1:-
        command:- git diff <branchName>   # To compare commits, branches, files, and more
        command:- git merge <BranchName>  # To merge two branches
    way 2:- create a PR (Pull Request)

[] Pull command:
    command:- git pull origin main 
    # Used to fetch and download content from a remote repository and immediately update the local repository to match that content

[] Resolving merge conflicts:
    An event that takes place when Git is unable to automatically resolve differences in code between two commits.

[] Undoing changes:
    Case 1:- Staged changes
             command:- git reset <FileName>
             command:- git reset
    Case 2:- Committed changes (for one commit)
             command:- git reset HEAD~1
    Case 3:- Committed changes (for many commits)
             command:- git reset <Commit Hash>
             command:- git reset --hard <commit Hash>

[] To see the origin of git initialization (i.e., the remote repositories associated with your local repository):
    command:- git remote -v

[] Git tag (Tag is basically a version number):
    command:- git tag  # Displays the tags or version numbers
    command:- git tag -a versionNumber -m "message"  (For Annotated and it is only show in local system for remote you want to push the tag)
    command:- git show (It show the details about tag)
    command:- 

[] Types of tagging:

    1. Lightweight tagging:
                   A lightweight tag is simply a name for a specific commit. It does not contain any additional information such as the tagger name, date, or message. 
                   Lightweight tags are often used for temporary or local tags that do not need to be shared with others.
    
    2. Annotated tagging:
                 Annotated tags are stored as full objects in the Git database. 
                 They contain a checksum, tagger name, email, date, and have a tagging message. 
                 They can also be signed and verified with GNU Privacy Guard (GPG).
   
